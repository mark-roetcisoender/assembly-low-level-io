Microsoft (R) Macro Assembler Version 14.29.30152.0	    12/07/23 18:13:11
;Designing Low_Level I/O Procedures     (Proj6_roetcism.asm  Page 1 - 1


				TITLE Designing Low_Level I/O Procedures     (Proj6_roetcism.asm)

				; Author: Mark Roetcisoender
				; Last Modified: 12/7/23
				; OSU email address: roetcism@oregonstate.edu
				; Course number/section:   CS271 Section 401
				; Project Number: Project 6                Due Date: 12/10/23
				; Description: Program which prompts the user for 10 numbers. The program utilizes macros to read and write integers via string processing rather than ReadInt
				; and WriteInt. Each integer must be able to fit into a 32-bit register (range of [-2147483648, 2147483647])- the sum of the integers must do the same. The 
				; program validates the user's string input, converts it into an integer, and stores it in an array. The sum and average are calculated, and then the integers,
				; the sum, and the average are displayed by converting the integers into strings and using a macro to print each.


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 


				; --------------------------------------------------------------------------------------------------------
				; Name: mGetString
				; Description:			Prompts the user to enter an integer, reads it as a string, and passes the string back in an output parameter
				; Preconditions:		prompt is the address of a string which prompts the user to enter an integer that will fit into 32 bits
				;						output_str is the address of a string to hold the user's entry
				;						count is an integer that represents is the maximum number of characters that can be entered
				;						bytes_read is a SDWORD
				;						
				; Postconditions:		
				; Receives:				prompt = address of a string prompting the user to enter a number less than 32 bits
				;						count = an integer which will be the maximum number of characters that will be read
				;
				; Returns:				output_str = the string where the user's entry will be stored (reference, output)
				;						bytes_read = the number of bytes entered by the user that the macro read (reference, output)
				; --------------------------------------------------------------------------------------------------------
					mGetString MACRO  prompt:REQ, output_str:REQ, count:REQ, bytes_read:REQ


							pushad

							mDisplayString	prompt
							mov			EDX, output_str
							mov			ECX, count			
							call		ReadString
							mov			bytes_read, EAX

							popad		

					ENDM

				; --------------------------------------------------------------------------------------------------------
				; Name: mDisplayString
				; Description:			Displays a string passed to the macro
				; Preconditions:		output is the address of a string to be printed
				;						
				; Postconditions:		
				; Receives:				output = the address of a string to be printed
				;
				; Returns:				None
				; --------------------------------------------------------------------------------------------------------
					mDisplayString MACRO output:REQ

							pushad							; preserve registers

							mov			EDX, output
							call		WriteString

							popad							; restore registers

					ENDM

 = 0000000D				MAX_DIGITS = 13
 = 0000000A				ARRAY_LENGTH = 10

 00000000			.data

 00000000 44 65 73 69 67		intro_1			BYTE	"Designing Low Level I/O Procedures						by Mark Roetcisoender", 13, 10, 13, 10, 0
	   6E 69 6E 67 20
	   4C 6F 77 20 4C
	   65 76 65 6C 20
	   49 2F 4F 20 50
	   72 6F 63 65 64
	   75 72 65 73 09
	   09 09 09 09 09
	   62 79 20 4D 61
	   72 6B 20 52 6F
	   65 74 63 69 73
	   6F 65 6E 64 65
	   72 0D 0A 0D 0A
	   00
 00000042 50 6C 65 61 73		intro_2			BYTE	"Please enter 10 signed decimal integers. After you have done so, the integers, their sum,", 13, 10, "and their average will be"
	   65 20 65 6E 74
	   65 72 20 31 30
	   20 73 69 67 6E
	   65 64 20 64 65
	   63 69 6D 61 6C
	   20 69 6E 74 65
	   67 65 72 73 2E
	   20 41 66 74 65
	   72 20 79 6F 75
	   20 68 61 76 65
	   20 64 6F 6E 65
	   20 73 6F 2C 20
	   74 68 65 20 69
	   6E 74 65 67 65
	   72 73 2C 20 74
	   68 65 69 72 20
	   73 75 6D 2C 0D
	   0A 61 6E 64 20
	   74 68 65 69 72
	   20 61 76 65 72
	   61 67 65 20 77
	   69 6C 6C 20 62
	   65
 000000B6  20 64 69 73 70						BYTE	" displayed. Please note that each integer must fit into a 32-bit register.", 13, 10, 13, 10, 0
	   6C 61 79 65 64
	   2E 20 50 6C 65
	   61 73 65 20 6E
	   6F 74 65 20 74
	   68 61 74 20 65
	   61 63 68 20 69
	   6E 74 65 67 65
	   72 20 6D 75 73
	   74 20 66 69 74
	   20 69 6E 74 6F
	   20 61 20 33 32
	   2D 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 0D
	   0A 0D 0A 00
 00000105 0D 0A 54 68 61		farewell_msg	BYTE	13, 10, "Thank you for playing- goodbye!", 13, 10, 0
	   6E 6B 20 79 6F
	   75 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 2D 20
	   67 6F 6F 64 62
	   79 65 21 0D 0A
	   00
 00000129 50 6C 65 61 73		prompt			BYTE	"Please enter a signed integer: ", 0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 69 6E 74
	   65 67 65 72 3A
	   20 00
 00000149  0000000F [			user_input		BYTE	15 DUP(0)
	    00
	   ]
 00000158 0D 0A 59 6F 75		invalid_char	BYTE	13, 10, "You have entered an invalid integer", 13, 10, 0
	   20 68 61 76 65
	   20 65 6E 74 65
	   72 65 64 20 61
	   6E 20 69 6E 76
	   61 6C 69 64 20
	   69 6E 74 65 67
	   65 72 0D 0A 00
 00000180 0D 0A 54 68 65		nums_statement	BYTE	13, 10, "The entered numbers are:", 13, 10, 0
	   20 65 6E 74 65
	   72 65 64 20 6E
	   75 6D 62 65 72
	   73 20 61 72 65
	   3A 0D 0A 00
 0000019D 0D 0A 54 68 65		avg_statement	BYTE	13, 10, "The truncated average of the numbers is: ", 0
	   20 74 72 75 6E
	   63 61 74 65 64
	   20 61 76 65 72
	   61 67 65 20 6F
	   66 20 74 68 65
	   20 6E 75 6D 62
	   65 72 73 20 69
	   73 3A 20 00
 000001C9 0D 0A 54 68 65		sum_statement	BYTE	13, 10, "The sum of the numbers is: ", 0
	   20 73 75 6D 20
	   6F 66 20 74 68
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 000001E7 2D 32 31 34 37		text_min1		BYTE	"-2147483648", 0
	   34 38 33 36 34
	   38 00
 000001F3 20 00				space			BYTE	" ", 0
 000001F5  0000000F [			avg_str			BYTE	15 DUP(0)					
	    00
	   ]
 00000204  0000000F [			rev_avg_str		BYTE	15 DUP(0)
	    00
	   ]
 00000213  0000000F [			sum_str			BYTE	15 DUP(0)
	    00
	   ]
 00000222  0000000F [			rev_sum_str		BYTE	15 DUP(0)
	    00
	   ]
 00000231  00000010 [			num_str			BYTE	16 DUP(0)
	    00
	   ]
 00000241  00000010 [			rev_num_str		BYTE	16 DUP(0)
	    00
	   ]
 00000251  00000001 [			null_str		BYTE	1 DUP(0)
	    00
	   ]

					
 00000252  0000000A [			int_array		SDWORD	10 DUP(?)
	    00000000
	   ]
 0000027A 00000000			bytes_read		SDWORD	?
 0000027E 00000000			converted_int	SDWORD	?
 00000282 00000000			average			SDWORD	?
 00000286 00000000			sum				SDWORD	?

 00000000			.code

				;---------------------------------------------------------------------------------
				;
				; main procedure
				; 
				;---------------------------------------------------------------------------------
 00000000			main PROC

					;--------------------------------------------------------------------------------------
					;
					; introduce program
					;
					;--------------------------------------------------------------------------------------
 00000000  68 00000042 R			push			OFFSET intro_2
 00000005  68 00000000 R			push			OFFSET intro_1
 0000000A  E8 00000110				call			introduction	

					;--------------------------------------------------------------------------------------
					;
					; Prompt user for 10 integers that can fit into a 32-bit register. Utilize the ReadVal
					; procedure, which takes the user's string input and converts a valid input into a numeric
					; value. Use a loop to call ReadVal 10 times and store each result in an array
					;
					;--------------------------------------------------------------------------------------

 0000000F  B9 0000000A				mov				ECX, ARRAY_LENGTH							; move ARRAY_LENGTH constant into ECX to use as a counter					
 00000014  BF 00000252 R			mov				EDI, OFFSET int_array						; point EDI at the address of the integer array

 00000019				_collectVals:

 00000019  68 000001E7 R			push			OFFSET text_min1
 0000001E  68 00000158 R			push			OFFSET invalid_char
 00000023  68 0000027A R			push			OFFSET bytes_read
 00000028  68 00000149 R			push			OFFSET user_input
 0000002D  68 00000129 R			push			OFFSET prompt
 00000032  68 0000027E R			push			OFFSET converted_int
 00000037  E8 000000FE				call			ReadVal										; call ReadVal to get a signed integer from the user
 0000003C  A1 0000027E R			mov				EAX, converted_int	
 00000041  89 07				mov				[EDI], EAX			
 00000043  83 C7 04				add				EDI, TYPE int_array							; move the signed intger into the int_array variaable and point EDI to the next element of int_array

 00000046  E2 D1				loop			_collectVals								; loop until 10 integers have been collected


					;--------------------------------------------------------------------------------------
					;
					; Calculates the sum of the integers in the array, then calculates the average. Stores
					; the values in global variables sum and average, respectively
					;
					;--------------------------------------------------------------------------------------
																					
 00000048  BE 00000252 R			mov				ESI, OFFSET int_array					
 0000004D  B9 0000000A				mov				ECX, LENGTHOF int_array
 00000052  BB 00000000				mov				EBX, 0										; EBX tracks the running total
 00000057				_sumLoop:
 00000057  8B 06				mov				EAX, [ESI]									; move the current element in the array that ESI points to into EAX & add it to the running total
 00000059  03 D8				add				EBX, EAX
 0000005B  83 C6 04				add				ESI, TYPE int_array							; increment to next element
 0000005E  E2 F7				loop			_sumLoop
 00000060  89 1D 00000286 R			mov				sum, EBX									; the sum of the integers is now stored in global variable sum

																					; calculate the average of the integers in the array
 00000066  A1 00000286 R			mov				EAX, sum
 0000006B  BB 0000000A				mov				EBX, ARRAY_LENGTH
 00000070  BA 00000000				mov				EDX, 0
 00000075  99					CDQ
 00000076  F7 FB				idiv			EBX
 00000078  A3 00000282 R			mov				average, EAX								; the average of the integers is now in global variable average

					;--------------------------------------------------------------------------------------
					;
					; Print each integer in the array by utilizing a loop and calling WriteVal each iteration.
					;
					;--------------------------------------------------------------------------------------

						mDisplayString	OFFSET nums_statement		
 0000007D  60		     1				pushad							; preserve registers
 0000007E  BA 00000180 R     1				mov			EDX, OFFSET nums_statement
 00000083  E8 00000000 E     1				call		WriteString
 00000088  61		     1				popad							; restore registers

 00000089  BE 00000252 R			mov				ESI, OFFSET	int_array
 0000008E  8B 06				mov				EAX, [ESI]
 00000090  BE 00000252 R			mov				ESI, OFFSET int_array						; move the address of int_array into ESI and it's length into ECX as a counter
 00000095  B9 0000000A				mov				ECX, LENGTHOF int_array
 0000009A				_arrayPrint:

 0000009A  51					push			ECX											; preserve counter in ECX while we 'reset' the num_str to null each loop
 0000009B  B0 00				mov				AL, 0										; move null character into AL
 0000009D  BF 00000231 R			mov				EDI, OFFSET num_str
 000000A2  B9 00000010				mov				ECX, LENGTHOF num_str
 000000A7  F3/ AA				rep				STOSB										; copy the null character into each spot in num_str each loop to avoid printing old characters
						
 000000A9  59					pop				ECX

 000000AA  68 00000231 R			push			OFFSET num_str								; set up WriteVal
 000000AF  68 00000241 R			push			OFFSET rev_num_str
 000000B4  FF 36				push			[ESI]										; integer to be converted & printed is what ESI is currently pointing at
 000000B6  E8 000001A4				call			WriteVal
						mDisplayString	OFFSET space
 000000BB  60		     1				pushad							; preserve registers
 000000BC  BA 000001F3 R     1				mov			EDX, OFFSET space
 000000C1  E8 00000000 E     1				call		WriteString
 000000C6  61		     1				popad							; restore registers
 000000C7  83 C6 04				add				ESI, TYPE int_array							; increment ESI to point at next integer in array
 000000CA  E2 CE				loop			_arrayPrint

					;--------------------------------------------------------------------------------------
					;
					; Print the sum and average of the integers in the array
					;
					;--------------------------------------------------------------------------------------

						mDisplayString	OFFSET sum_statement	
 000000CC  60		     1				pushad							; preserve registers
 000000CD  BA 000001C9 R     1				mov			EDX, OFFSET sum_statement
 000000D2  E8 00000000 E     1				call		WriteString
 000000D7  61		     1				popad							; restore registers

 000000D8  68 00000213 R			push			OFFSET sum_str
 000000DD  68 00000222 R			push			OFFSET rev_sum_str
 000000E2  FF 35 00000286 R			push			sum
 000000E8  E8 00000172				call			WriteVal

						mDisplayString	OFFSET avg_statement	
 000000ED  60		     1				pushad							; preserve registers
 000000EE  BA 0000019D R     1				mov			EDX, OFFSET avg_statement
 000000F3  E8 00000000 E     1				call		WriteString
 000000F8  61		     1				popad							; restore registers

 000000F9  68 000001F5 R			push			OFFSET avg_str
 000000FE  68 00000204 R			push			OFFSET rev_avg_str
 00000103  FF 35 00000282 R			push			average
 00000109  E8 00000151				call			WriteVal

					;--------------------------------------------------------------------------------------
					;
					; Display farewell message to user
					;
					;--------------------------------------------------------------------------------------

 0000010E  68 00000105 R			push		OFFSET farewell_msg	
 00000113  E8 000001C3				call		farewell

				Invoke ExitProcess,0		
 00000118  6A 00	   *	    push   +000000000h
 0000011A  E8 00000000 E   *	    call   ExitProcess
 0000011F			main ENDP

				;---------------------------------------------------------------------------------------------------------
				; Name: introduction
				; Description:			Introduces the program
				; Preconditions:		intro_1 and intro_2, are all strings describing the program
				;						
				; Postconditions:		None
				; Receives:				[EBP + 8] = address of the title_name string to be printed (reference, input)
				;						[EBP + 12] = address of the string intro_1 to be printed (reference, input)
				;
				; Returns:				None
				;---------------------------------------------------------------------------------------------------------
 0000011F			introduction PROC
 0000011F  55				push		EBP
 00000120  8B EC			mov			EBP, ESP

					mDisplayString [EBP + 8]										; use macro and address of title_name
 00000122  60		     1				pushad							; preserve registers
 00000123  8B 55 08	     1				mov			EDX, [EBP + 8]
 00000126  E8 00000000 E     1				call		WriteString
 0000012B  61		     1				popad							; restore registers

					mDisplayString [EBP + 12]										; use macro and address of intro_1
 0000012C  60		     1				pushad							; preserve registers
 0000012D  8B 55 0C	     1				mov			EDX, [EBP + 12]
 00000130  E8 00000000 E     1				call		WriteString
 00000135  61		     1				popad							; restore registers
											
 00000136  5D				pop			EBP
 00000137  C2 0008			RET			8

 0000013A			introduction ENDP

				; --------------------------------------------------------------------------------------------------------
				; Name: readVal
				; Description:			Prompts the user to enter a signed integer that will fit inside a 32-bit register. Checks that the value entered is valid, and re-prompts the user
				;						to re-enter if the value is not valid. Converts the entry from a string to an integer and returns the value. Utilizes macro 'mGetString' to collect 
				;						user input. Returns the value entered as an integer
				; Preconditions:		'prompt', 'user_input', 'text_min1' and 'invalid_char' are all strings
				;						'text_min1' is a string representing the smallest integer that can fit into a 32-bit register (-2147483648)
				;						converted_int and num_bytes are both SDWORDs
				;						
				; Postconditions:		
				; Receives:				[EBP + 8] = address of the DWORD (converted_int) where the converted integer will be placed (reference, output)
				;						[EBP + 12] = address of the string 'prompt' to be printed (reference, input)
				;						[EBP + 16] = address of the string 'user_input' which will be passed & returned to the mGetString macro (reference, input)
				;						[EBP + 20] = the address of the SDWORD num_bytes which is the number bytes read by the mGetString macro. Passed to the macro (reference, input)
				;						[EBP + 24]	= the address of the string 'invalid_char' to be printed (reference, input)
				;						[EBP + 28] = the address of the string text_min1 holding the minimum valid value (reference, input)
				;
				; Returns:				[EBP + 8]	address of the SDWORD (converted_int) where the converted integer will be placed (reference, output)
				; --------------------------------------------------------------------------------------------------------
 0000013A			readVal PROC

 0000013A  55					push		EBP
 0000013B  8B EC				mov			EBP, ESP
 0000013D  60					pushad


 0000013E				_start:
 0000013E  8B 7D 08				mov			EDI, [EBP + 8]									; move address of converted_int SDWORD into EDI 
						mGetString	[EBP + 12], [EBP + 16], MAX_DIGITS, [EBP + 20]
 00000141  60		     1				pushad
 00000142  60		     2				pushad							; preserve registers
 00000143  8B 55 0C	     2				mov			EDX, [EBP + 12]
 00000146  E8 00000000 E     2				call		WriteString
 0000014B  61		     2				popad							; restore registers
 0000014C  8B 55 10	     1				mov			EDX, [EBP + 16]
 0000014F  B9 0000000D	     1				mov			ECX, MAX_DIGITS			
 00000154  E8 00000000 E     1				call		ReadString
 00000159  89 45 14	     1				mov			[EBP + 20], EAX
 0000015C  61		     1				popad		

 0000015D  8B 75 10				mov			ESI, [EBP + 16]									; offset user input string
 00000160  8B 4D 14				mov			ECX, [EBP + 20]									; move number of bytes read into ecx to be the counter. 
 00000163  FC					CLD															; clear direction flag
 00000164  BA 00000000				mov			EDX, 0											; 'reset' EDX each run through

 00000169  83 F9 0C				cmp			ECX, MAX_DIGITS - 1								; check to make sure there's no more than 11 digits ('-' or '+' plus 10 digits is the 'max')
 0000016C  0F 84 000000D9			je			_invalidChar

 00000172				_checkChar:	
 00000172  AC					LODSB														; loop through to make sure the ASCII character is valid using LODSB by subtracting 48 to get decimal value
																					
 00000173  2C 30				sub			AL, 48	

 00000175  3C FD				cmp			AL, -3											; check for leading '-'
 00000177  74 16				je			_negCheck
						
 00000179  3C FB				cmp			AL, -5											; check for leading '+'
 0000017B  74 30				je			_posCheck

 0000017D  3C 00				cmp			AL, 0											; check if the converted value is between 0-9, indicating a integer
 0000017F  0F 8C 000000C6			jl			_invalidChar
 00000185  3C 09				cmp			AL, 9
 00000187  0F 8F 000000BE			jg			_invalidChar
 0000018D  EB 3F				jmp			_checkCharLoop

 0000018F				_negCheck:

 0000018F  3B 4D 14				cmp			ECX, [EBP + 20]									; check if this is the first value by comparing bytes_read to ECX
 00000192  0F 85 000000B3			jne			_invalidChar									; if not first value -> invalid entry. If it is the first value, set EDX to 1 to indicate a negative value
 00000198  BA 00000000				mov			EDX, 0
 0000019D  BA 00000001				mov			EDX, 1							
 000001A2  83 F9 01				cmp			ECX, 1											; if bytes_read = 1, and we're here only '-' was entered -> invalid entry
 000001A5  0F 84 000000A0			je			_invalidChar
																					
 000001AB  EB 21				jmp			_checkCharLoop

 000001AD				_posCheck:

 000001AD  3B 4D 14				cmp			ECX, [EBP + 20]									; check if this is the first value by comparing bytes_read to ECX
 000001B0  0F 85 00000095			jne			_invalidChar									; if not first value -> invalid entry. If it is the first value, set EDX to 2 to indicate a positive with a + sign
 000001B6  BA 00000000				mov			EDX, 0
 000001BB  BA 00000002				mov			EDX, 2
 000001C0  83 F9 01				cmp			ECX, 1
 000001C3  0F 84 00000082			je			_invalidChar									; if bytes_read = 1 and we're here, only a '+' was entered -> invalid entry
 000001C9  8B 5D 14				mov			EBX, [EBP + 20]

 000001CC  EB 00				jmp			_checkCharLoop

 000001CE				_checkCharLoop:
 000001CE  83 FA 00				cmp			EDX, 0											; if 11 bytes were read, we now should check to see if we have a leading '+' or '-'. If not, the entry is invalid
 000001D1  74 04				je			_byteCheck										; jump if EDX is 0 (will have a 1 or 2 if there is a leading sign)
 000001D3				_beforeCheckChar:
 000001D3  E2 9D				LOOP		_checkChar
 000001D5  EB 0A				jmp			_beforeConvertChar

 000001D7				_byteCheck:
 000001D7  8B 5D 14				mov			EBX, [EBP + 20]									; compare bytes read to 11. If equal, invalid entry
 000001DA  83 FB 0B				cmp			EBX, MAX_DIGITS - 2
 000001DD  74 6C				je			_invalidChar
 000001DF  EB F2				jmp			_beforeCheckChar 

 000001E1				_beforeConvertChar:															
 000001E1  8B 75 10				mov			ESI, [EBP + 16]									; offset user input string back to ESI
 000001E4  8B 4D 14				mov			ECX, [EBP + 20]									; move number of bytes read into back into ecx to be the counter.
 000001E7  BB 00000000				mov			EBX, 0											; use EBX to hold the running total
 000001EC  52					push		EDX												; preserve EDX for possible reference later (- or +)
											
 000001ED				_convertChar:													; conversion to integer loop

 000001ED  B8 00000000				mov			EAX, 0											; move 0 into EAX to 'clear' it (and AL inside it)
 000001F2  AC					LODSB
 000001F3  83 FA 01				cmp			EDX, 1											; if there is a leading '-' or '+', jump to just before the loop to skip past the manipulation (won't work on '-' and '+')
 000001F6  74 1D				je			_leadingSign

 000001F8  83 FA 02				cmp			EDX, 2											; "+'
 000001FB  74 18				je			_leadingSign

 000001FD  83 E8 30				sub			EAX, 48											; subtract 48 from the character to get it's integer value

 00000200  50					push		EAX												; preserve EAX (integer value of the current char)
 00000201  8B C3				mov			EAX, EBX										; move running total into EAX for multiplication by 10
 00000203  BB 0000000A				mov			EBX, 10											
 00000208  F7 EB				imul		EBX												; 
 0000020A  8B D8				mov			EBX, EAX										; move old running total * 10 into EBX
 0000020C  58					pop			EAX												; pop EAX to balance stack & restore integer value of current char
 0000020D  70 0F				jo			_balanceStack									; jump if there is an overflow generated by imul- too large of an integer
 0000020F  03 D8				add			EBX, EAX										; add integer value of current char to running total * 10
 00000211  70 0B				jo			_balanceStack									; jump if there is an overflow generated by imul- too large of an integer
 00000213  EB 05				jmp			_toCCLoop										; jump past _leadingSign

 00000215				_leadingSign:
 00000215  BA 00000000				mov			EDX, 0											; if EDX was 1 or 2, move another value into it to avoid hitting the check at the top of this loop.
 0000021A				_toCCLoop:
 0000021A  E2 D1				LOOP		_convertChar
 0000021C  EB 1D				jmp			_negativeCheck

 0000021E				_balanceStack:
 0000021E  5A					pop			EDX												; keep stack balanced by popping stored EDX prior to displaying error message
 0000021F  83 FA 01				cmp			EDX, 1											; check if it's negative number to compare against the minimum value
 00000222  74 02				je			_minValCheck
 00000224  EB 25				jmp			_invalidChar

 00000226				_minValCheck:
 00000226  8B 4D 14				mov			ECX, [EBP + 20]									; move number of bytes read into back into ecx
 00000229  8B 75 10				mov			ESI, [EBP + 16]									; offset user input string back to ESI
 0000022C  8B 7D 1C				mov			EDI, [EBP + 28]									; offset of the string containing '-2147483648' to compare to user input

 0000022F				_minValLoop:
 0000022F  A6					cmpsb														; compare characters of user input string and string containing '-2147483648' and escape if not the same
 00000230  75 19				jne			_invalidChar
 00000232  E2 FB				loop		_minValLoop

 00000234  8B 7D 08				mov			EDI, [EBP + 8]									; if we made it this far, we have -2147483648- move final integer into the converted integer variable & jump to end
 00000237  89 1F				mov			[EDI], EBX										
 00000239  EB 1F				jmp			_toEnd

 0000023B				_negativeCheck:
 0000023B  5A					pop			EDX												; restore EDX from push in convertChar set up to so we can check if the value is negative. Jump to negativeNum if so
 0000023C  83 FA 01				cmp			EDX, 1
 0000023F  74 04				je			_negativeNum

 00000241  89 1F				mov			[EDI], EBX										; move final integer into the converted integer variable & jump to the end
 00000243  EB 15				jmp			_toEnd											

 00000245				_negativeNum:
 00000245  F7 DB				neg			EBX												; if negative, convert to negative value, move final integer into the converted integer variable & jump to end
 00000247  89 1F				mov			[EDI], EBX										
 00000249  EB 0F				jmp			_toEnd					

 0000024B				_invalidChar:

						mDisplayString [EBP + 24]									; use macro to display invalid character message
 0000024B  60		     1				pushad							; preserve registers
 0000024C  8B 55 18	     1				mov			EDX, [EBP + 24]
 0000024F  E8 00000000 E     1				call		WriteString
 00000254  61		     1				popad							; restore registers

 00000255  E9 FFFFFEE4				jmp			_start

 0000025A				_toEnd:
						
 0000025A  61					popad
 0000025B  5D					pop			EBP
 0000025C  C2 0018				RET			24

 0000025F			readVal ENDP

				; --------------------------------------------------------------------------------------------------------
				; Name: writeVal
				; Description:			Converts a numeric value to it's equivalent string representation (eg 55 (int) is converted to '55' (string).
				;						Utilizes the mDisplayStringMacro to print the string.
				; Preconditions:		[EBP + 8] is an intger which fits inside a 32-bit register
				;						[EBP + 12] and [EBP + 16] are both unitialized strings
				;						
				; Postconditions:		None
				; Receives:				[EBP + 8] = numeric value to be converted to a string and printed printed (value, input)
				;						[EBP + 12] = offset to a string which will be overwritten with ASCII characters representing the numberic value (reference, output)
				;						[EBP + 16] = offset to a string which will be the reverse of [EBP + 12], and display the 'number' in correct order
				;
				; Returns:				None
				; --------------------------------------------------------------------------------------------------------
 0000025F			writeVal PROC

 0000025F  55					push		EBP
 00000260  8B EC				mov			EBP, ESP
 00000262  60					pushad

 00000263  B8 00000000				mov			EAX, 0										; clear EAX and move initial numeric value into it
 00000268  8B 45 08				mov			EAX, [EBP + 8]								
 0000026B  8B 7D 0C				mov			EDI, [EBP + 12]								; move offset of string destination into EDI
 0000026E  FC					CLD														; clear direction flag
 0000026F  83 F8 00				cmp			EAX, 0										; compare value to see if it's a negative
 00000272  7C 02				jl			_negativeNum
 00000274  EB 08				jmp			_beforeConversionLoop

 00000276				_negativeNum:
 00000276  BB FFFFFFFF				mov			EBX, -1										; if number is negative, store a -1 in EBX that will be referenced later. Use it to 
 0000027B  FC					CLD														; multiply value in EAX by -1 to get positive value for conversion as well
 0000027C  F7 EB				imul		EBX


 0000027E				_beforeConversionLoop:
 0000027E  53					push		EBX											; push EBX so we can reference it after the conversion loop
 0000027F  B9 00000000				mov			ECX, 0										; move 0 into ecx so we can use it to know the length of the string

 00000284				_conversionLoop:

 00000284  BA 00000000				mov			EDX, 0										; divide the integer by 10 and  check to see if the remainder is positive or negative (edge case -2147483648) & mult by -1 if negative
 00000289  99					CDQ
 0000028A  BB 0000000A				mov			EBX, 10
 0000028F  F7 FB				idiv		EBX

																				
 00000291  50					push		EAX											
 00000292  8B C2				mov			EAX, EDX
 00000294  83 F8 00				cmp			EAX, 0
 00000297  7C 0D				jl			_absoluteVal
 00000299				_backToAdd:
 00000299  83 C0 30				add			EAX, 48										; add 48 to the remainder so that it is now it's value in ASCII and use STOSB to store in the string EDI points at
 0000029C  AA					STOSB
 0000029D  41					inc			ECX											; increment number of characters in the string
 0000029E  58					pop			EAX
 0000029F  83 F8 00				cmp			EAX, 0										; check if quotient is 0, jump back to top of loop if not
 000002A2  74 0B				je			_conversionDone
 000002A4  EB DE				jmp			_conversionLoop

 000002A6				_absoluteVal:												; if there's a negative ASCII value, multiply by -1
 000002A6  BB FFFFFFFF				mov			EBX, -1
 000002AB  F7 EB				imul		EBX
 000002AD  EB EA				jmp			_backToAdd

 000002AF				_conversionDone:

 000002AF  5B					pop			EBX											; pop EBX so we can add a '-' if the numeric value was negative
 000002B0  83 FB FF				cmp			EBX, -1
 000002B3  75 08				jne			_reverseStringSetUp							; if not negative, jump directly to the reverseString part

 000002B5  BB 0000002D				mov			EBX, 45
 000002BA  89 1F				mov			[EDI], EBX									; add a '45', or '-' to the end of the string if it is a negative
 000002BC  41					inc			ECX											; increment ECX to account for the '-'



 000002BD				_reverseStringSetUp:										; loop to reverse the string so it reads correctly
 000002BD  8B 75 0C				mov			ESI, [EBP + 12]								; move OFFSET of 'original' string into ESI
 000002C0  03 F1				add			ESI, ECX									; add the length of the string to ESI to start from the end
 000002C2  4E					dec			ESI
 000002C3  8B 7D 10				mov			EDI, [EBP + 16]								; move OFFSET of 'reversed' string into EDI

 000002C6				_reverseLoop:												; load the string from the initial string into the destination string using string primitives & direction flag
 000002C6  FD					STD
 000002C7  AC					LODSB
 000002C8  FC					CLD
 000002C9  AA					STOSB
 000002CA  E2 FA				loop _reverseLoop


						mDisplayString	[EBP + 16]								; use macro to display final string
 000002CC  60		     1				pushad							; preserve registers
 000002CD  8B 55 10	     1				mov			EDX, [EBP + 16]
 000002D0  E8 00000000 E     1				call		WriteString
 000002D5  61		     1				popad							; restore registers

 000002D6  61					popad
 000002D7  5D					pop			EBP
 000002D8  C2 000C				RET			12

 000002DB			writeVal ENDP
				; --------------------------------------------------------------------------------------------------------
				; Name: farewell
				; Description:			Displays a farewell message to the user
				; Preconditions:		farewell_msg is a string stating a farewell message
				;						
				; Postconditions:		None
				; Receives:				[EBP + 8] = address of the farewell_msg string to be printed (reference, input)
				;
				; Returns:				None
				; --------------------------------------------------------------------------------------------------------
 000002DB			farewell PROC
 000002DB  55					push		EBP
 000002DC  8B EC				mov			EBP, ESP
 000002DE  52					push		EDX							

						mDisplayString	[EBP + 8]								; use macro to display farewell message
 000002DF  60		     1				pushad							; preserve registers
 000002E0  8B 55 08	     1				mov			EDX, [EBP + 8]
 000002E3  E8 00000000 E     1				call		WriteString
 000002E8  61		     1				popad							; restore registers

 000002E9  5A					pop			EDX							
 000002EA  5D					pop			EBP
 000002EB  C2 0004				RET			4

 000002EE			farewell ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30152.0	    12/07/23 18:13:11
;Designing Low_Level I/O Procedures     (Proj6_roetcism.asm  Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000028A Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002EE Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
farewell . . . . . . . . . . . .	P Near	 000002DB _TEXT	Length= 00000013 Public STDCALL
introduction . . . . . . . . . .	P Near	 0000011F _TEXT	Length= 0000001B Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000011F Public STDCALL
  _collectVals . . . . . . . . .	L Near	 00000019 _TEXT	
  _sumLoop . . . . . . . . . . .	L Near	 00000057 _TEXT	
  _arrayPrint  . . . . . . . . .	L Near	 0000009A _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
readVal  . . . . . . . . . . . .	P Near	 0000013A _TEXT	Length= 00000125 Public STDCALL
  _start . . . . . . . . . . . .	L Near	 0000013E _TEXT	
  _checkChar . . . . . . . . . .	L Near	 00000172 _TEXT	
  _negCheck  . . . . . . . . . .	L Near	 0000018F _TEXT	
  _posCheck  . . . . . . . . . .	L Near	 000001AD _TEXT	
  _checkCharLoop . . . . . . . .	L Near	 000001CE _TEXT	
  _beforeCheckChar . . . . . . .	L Near	 000001D3 _TEXT	
  _byteCheck . . . . . . . . . .	L Near	 000001D7 _TEXT	
  _beforeConvertChar . . . . . .	L Near	 000001E1 _TEXT	
  _convertChar . . . . . . . . .	L Near	 000001ED _TEXT	
  _leadingSign . . . . . . . . .	L Near	 00000215 _TEXT	
  _toCCLoop  . . . . . . . . . .	L Near	 0000021A _TEXT	
  _balanceStack  . . . . . . . .	L Near	 0000021E _TEXT	
  _minValCheck . . . . . . . . .	L Near	 00000226 _TEXT	
  _minValLoop  . . . . . . . . .	L Near	 0000022F _TEXT	
  _negativeCheck . . . . . . . .	L Near	 0000023B _TEXT	
  _negativeNum . . . . . . . . .	L Near	 00000245 _TEXT	
  _invalidChar . . . . . . . . .	L Near	 0000024B _TEXT	
  _toEnd . . . . . . . . . . . .	L Near	 0000025A _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
writeVal . . . . . . . . . . . .	P Near	 0000025F _TEXT	Length= 0000007C Public STDCALL
  _negativeNum . . . . . . . . .	L Near	 00000276 _TEXT	
  _beforeConversionLoop  . . . .	L Near	 0000027E _TEXT	
  _conversionLoop  . . . . . . .	L Near	 00000284 _TEXT	
  _backToAdd . . . . . . . . . .	L Near	 00000299 _TEXT	
  _absoluteVal . . . . . . . . .	L Near	 000002A6 _TEXT	
  _conversionDone  . . . . . . .	L Near	 000002AF _TEXT	
  _reverseStringSetUp  . . . . .	L Near	 000002BD _TEXT	
  _reverseLoop . . . . . . . . .	L Near	 000002C6 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAY_LENGTH . . . . . . . . . .	Number	 0000000Ah   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_DIGITS . . . . . . . . . . .	Number	 0000000Dh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
average  . . . . . . . . . . . .	DWord	 00000282 _DATA	
avg_statement  . . . . . . . . .	Byte	 0000019D _DATA	
avg_str  . . . . . . . . . . . .	Byte	 000001F5 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bytes_read . . . . . . . . . . .	DWord	 0000027A _DATA	
converted_int  . . . . . . . . .	DWord	 0000027E _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
farewell_msg . . . . . . . . . .	Byte	 00000105 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
int_array  . . . . . . . . . . .	DWord	 00000252 _DATA	
intro_1  . . . . . . . . . . . .	Byte	 00000000 _DATA	
intro_2  . . . . . . . . . . . .	Byte	 00000042 _DATA	
invalid_char . . . . . . . . . .	Byte	 00000158 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
null_str . . . . . . . . . . . .	Byte	 00000251 _DATA	
num_str  . . . . . . . . . . . .	Byte	 00000231 _DATA	
nums_statement . . . . . . . . .	Byte	 00000180 _DATA	
prompt . . . . . . . . . . . . .	Byte	 00000129 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
rev_avg_str  . . . . . . . . . .	Byte	 00000204 _DATA	
rev_num_str  . . . . . . . . . .	Byte	 00000241 _DATA	
rev_sum_str  . . . . . . . . . .	Byte	 00000222 _DATA	
space  . . . . . . . . . . . . .	Byte	 000001F3 _DATA	
sum_statement  . . . . . . . . .	Byte	 000001C9 _DATA	
sum_str  . . . . . . . . . . . .	Byte	 00000213 _DATA	
sum  . . . . . . . . . . . . . .	DWord	 00000286 _DATA	
text_min1  . . . . . . . . . . .	Byte	 000001E7 _DATA	
user_input . . . . . . . . . . .	Byte	 00000149 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
